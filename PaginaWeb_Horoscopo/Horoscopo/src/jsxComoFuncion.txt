/*
export function TwitterFollonCard({ userName, name, isFollowing }) {
	return (
		<article className='tw-followCard'>
			<header className='tw-followCard-header'>
				<img
				className="tw-followCard-avatar"
				alt="El avatar de midudev"
				src={`https://unavatar. io/${userName}`} />
				<div className="tw-followCard-info">
					<strong> {name} </strong>
					<span className="tw-followCard-infoUserName">@{userName}</span>
				</div>
			</header>

			<aside>
				<button className="tw-followCard-button">
					Seguir
				</button>
			</aside>
		</article>
	)
}
*/
/* Este es un ejemplo que se hizo en el video, básicamente es la estructura de las tarjetas de twitter
y vemos que es como una función, pide parámetro y para pasarselos seria algo así: */

/*
import {jsxComoFuncion} from 'jsxComoFuncion.jsx'

export function App2() {
	return(
		<section className='App2'>
			<TwitterFollonCard userName="Carlos_Tevez16" name="Carlos Tevez" isFollowing={false}></TwitterFollonCard>
			<TwitterFollonCard userName="midulive" name="Miguel Angel Duran" isFollowing ></TwitterFollonCard>

		</section>
	)
}
*/
/*Esta funcion (App2) se llama en el main.jsx, y esta funcion lo que hace es crear componentes cuantas veces queramos*/


-------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------


https://es.react.dev/ --> Documentación completa de REACT

Comandos para crear un proyecto: 
	npm create vite@latest
Escogemos Nombre proyecto, luego escogemos el framework 'React'
y prosiguiente, escogemos lenguaje, en mi caso, JavaScript + SWC

----------------------------------------------------------------------------------------------------
Ejemplo de interfaz que muestra como youtube, una lista de videos
importante porque así es como podemos mostrar un componente varias veces, usando la función map()

function VideoList({ videos, emptyHeading }) {
  const count = videos.length;
  let heading = emptyHeading;
  if (count > 0) {
    const noun = count > 1 ? 'Videos' : 'Video';
    heading = count + ' ' + noun;
  }
  return (
    <section>
      <h2>{heading}</h2>
      {videos.map(video =>
        <Video key={video.id} video={video} />
      )}
    </section>
  );
}

----------------------------------------------------------------------------------------
Ejemplo, realizar un contador con el HookUseState de React, también se ve el uso de los
props, ya que solicita un prop y este es llamado como "name" 

import { useState } from 'react';

export default function Welcome(props) {
    const [cunter, setCounter] = useState(0);
    const { name } = props;

    return(
	<div>
	   <hl>=Hola, {name}</hl>
	   <h2>Contador de React con Hooks</h2>
	   <h4>El número del contador es {counter} </h4>
	   <button type="submit" onClick{() => setCounter(counter + 1)}>
	      Sumar contador
	   </button>
	</div>
    );
}

-----------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------

Miremos como se realiza un login usando react y jsx 

//Variables para logeo y registro
const [correo, setCorreo] = useState('');
const [clave, setClave] = useState('');

Este es el atributo formulario principal y tenemos que hacerle la funcion onSubmit para llamar a la funcion login,
que esta mas abajo

<form className={formInicio} 
	onSubmit={ev => {
		ev.preventDefault();
		login(correo, clave);
		console.log(correo + "  " + clave)
	}}
>

en el input al momento que vamos escribiendo, vamos actualizando la variable correo y clave, por eso usamos el
setCorreo y setClave, para actualizar este valor segun vamos ingresando los datos

<input name="correo" value={correo} type="text" placeholder="correo electrónico"
	onChange={ev => setCorreo(ev.target.value)}
/>

<input name="clave" value={clave} type="password" placeholder="contraseña"
	onChange={ev => setClave(ev.target.value)}
/>

Esta es la función encargada de validar los datos (correo y la contraseña ingresada)

const login = (correo, clave)=>{
  if(correo === 'hola@gmail.com' && clave === 'hola'){
    alert("Logeado con exito")
  }else{
    alert("correo o contraseña incorrectos")
  }
}
